{"version":3,"sources":["components/Sidebar/sidebar.js","components/Home/home.js","components/Projects/projects.js","components/Hobbies/hobbies.js","App.js","serviceWorker.js","index.js"],"names":["props","width","className","href","Home","class","src","process","style","alt","target","border","height","Component","Projects","Hobbies","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sXAIe,G,MAAA,SAAAA,GACb,OACE,kBAAC,QAAD,CAAMC,MAAO,KACX,uBAAGC,UAAU,YAAYC,KAAK,SAA9B,QAIA,uBAAGD,UAAU,YAAYC,KAAK,aAA9B,YAIA,uBAAGD,UAAU,YAAYC,KAAK,YAA9B,cCuBSC,G,6KAjCX,OACE,6BACE,yBAAKC,MAAO,cACV,8CAGF,yBAAKC,IAAKC,sBAA6CC,MAAO,CAACP,MAAO,KAAMQ,IAAI,SAChF,0EAEA,mGAEE,6BACA,6BAHF,oDAKE,6BACA,6BANF,kDAUA,uBAAGN,KAAK,8BAA8BO,OAAO,UAC3C,yBAAKC,OAAO,IAAIF,IAAI,SAASH,IAAKC,4BAAoDN,MAAM,KAAKW,OAAO,QAG1G,uBAAGT,KAAK,yCAAyCO,OAAO,UACtD,yBAAKC,OAAO,IAAIF,IAAI,WAAWH,IAAKC,8BAAqDN,MAAM,KAAKW,OAAO,QAG7G,6BACA,kC,GA9BWC,cC6DJC,G,6KA3DX,OACI,6BACI,wCACI,yBAAKT,MAAO,WACR,+DADJ,+FAII,6BACA,6BALJ,sFAOI,6BACA,6BARJ,qGAUI,6BACA,6BAEA,yFAGJ,yBAAKA,MAAO,WACR,oDADJ,uGAII,6BACA,6BALJ,oGAOI,6BACA,6BARJ,8FAUI,6BACA,6BAXJ,wGAaI,6BACA,6BAEA,wDAGJ,yBAAKA,MAAO,WACV,wDADF,6FAIE,6BACA,6BALF,+FAOE,6BACA,6BARF,mFAUE,6BACA,6BAXF,oGAcE,wE,GAtDKQ,cC8BRE,G,6KA5BX,OACI,6BACE,uCACE,yBAAKV,MAAO,UACV,6CADF,8FAGE,6BACA,6BAJF,6EAME,6BACA,6BACA,yBAAKC,IAAKC,+BAAsDC,MAAO,CAACP,MAAO,KAAMQ,IAAI,gBAI3F,yBAAKJ,MAAO,UACV,iDADF,2FAGE,6BACA,6BACA,yBAAKC,IAAKC,uBAA8CN,MAAO,IAAKW,OAAU,IAAKH,IAAI,gB,GAtB/EI,cC8BPG,E,uKAzBX,OACE,yBAAKC,GAAK,OACR,yBAAKA,GAAK,WACR,kBAAC,EAAD,OAGF,yBAAKA,GAAK,aACR,yBAAKA,GAAK,QACR,kBAAC,EAAD,OAGF,yBAAKA,GAAK,YACR,kBAAC,EAAD,OAGF,yBAAKA,GAAK,WACR,kBAAC,EAAD,a,GAlBMJ,aCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a634595e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { slide as Menu } from \"react-burger-menu\";\r\nimport './sidebar.css';\r\n\r\nexport default props => {\r\n  return (\r\n    <Menu width={250}>\r\n      <a className=\"menu-item\" href=\"#home\">\r\n        Home\r\n      </a>\r\n\r\n      <a className=\"menu-item\" href=\"#projects\">\r\n        Projects\r\n      </a>\r\n\r\n      <a className=\"menu-item\" href=\"#hobbies\">\r\n        Hobbies\r\n      </a>\r\n\r\n    </Menu>\r\n  );\r\n};","import React, { Component } from 'react';\r\nimport './home.css';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div class =\"nameHeader\">\r\n          <h1> Sonny Young </h1>\r\n        </div>\r\n\r\n        <img src={process.env.PUBLIC_URL + \"/images/Doge.jpg\"} style={{width: 600}} alt='Doge' />\r\n        <h2> \"When things get rough, we become tough\" </h2>\r\n\r\n        <p>\r\n          Hello! I'm a UBC Computer Science student who just finished 3rd year.\r\n          <br></br>\r\n          <br></br>\r\n          Currently seeking a co-op position for Fall 2020.\r\n          <br></br>\r\n          <br></br>\r\n          Feel free to contact me at sonnyy99@gmail.com.\r\n        </p>   \r\n\r\n        <a href=\"https://github.com/sonnyy99\" target=\"_blank\"> \r\n          <img border=\"0\" alt=\"GitHub\" src={process.env.PUBLIC_URL + \"/images/GitHubLogo.png\"}  width=\"50\" height=\"50\"/>\r\n        </a>\r\n            \r\n        <a href=\"https://www.linkedin.com/in/sonnyyubc/\" target=\"_blank\"> \r\n          <img border=\"0\" alt=\"LinkedIn\" src={process.env.PUBLIC_URL + \"/images/LinkedInLogo.png\"} width=\"50\" height=\"50\"/>\r\n        </a>\r\n\r\n        <br></br>\r\n        <br></br>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\nexport default Home;","import React, { Component } from 'react';\r\nimport './projects.css';\r\n\r\nclass Projects extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n            <h1>Projects</h1>\r\n                <div class =\"project\">\r\n                    <h3> Food Delivery Web Application </h3>\r\n\r\n                    My team and I built a database by modelling the customers, restaurants, drivers, and orders.\r\n                    <br></br>\r\n                    <br></br>\r\n                    We then created the SQL queries needed to access the needed data from the database.\r\n                    <br></br>\r\n                    <br></br>\r\n                    Finally, we implemented functionality including user accounts, ordering food, and leaving reviews.\r\n                    <br></br>\r\n                    <br></br>\r\n\r\n                    <h4> Technologies: MySQL, Node.js with Express, Vue.js, Git </h4>\r\n                </div>\r\n                \r\n                <div class =\"project\">\r\n                    <h3> Discord Server Bot </h3>\r\n\r\n                    Discord is a voice chat application where rooms are open for multiple people to join in at any time.\r\n                    <br></br>\r\n                    <br></br>\r\n                    A problem my friends and I had was that we didn't know who entered a voice room without checking.\r\n                    <br></br>\r\n                    <br></br>\r\n                    I created this bot to give an auditory greeting so we would know who joined the voice room.\r\n                    <br></br>\r\n                    <br></br>\r\n                    I also implemented a mute feature for this bot for when the people in the voice room needed to focus.\r\n                    <br></br>\r\n                    <br></br>\r\n\r\n                    <h4> Technologies: Node.js </h4>\r\n                </div>\r\n                \r\n                <div class =\"project\">\r\n                  <h3> Water Fountain Tracker </h3>\r\n\r\n                  Often times at UBC I would need drinking water but wouldn't know where to get any near me.\r\n                  <br></br>\r\n                  <br></br>\r\n                  To save time, I made this project to find the closest water fountain to my current location.\r\n                  <br></br>\r\n                  <br></br>\r\n                  I started by representing water fountains and their locations using OOP in Java.\r\n                  <br></br>\r\n                  <br></br>\r\n                  I then created a GUI using JavaFX allowing users to create, remove, and view the water fountains.\r\n\r\n                  <h4> Technologies: JavaFX, JUnit, Git </h4>\r\n                </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Projects;\r\n","import React, { Component } from 'react';\r\nimport './hobbies.css';\r\n\r\nclass Hobbies extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          <h1>Hobbies</h1>\r\n            <div class =\"hobbie\">\r\n              <h3> Team Sports </h3>\r\n              I love sports because they are not only good exercise, but also a group bonding experience.\r\n              <br></br>\r\n              <br></br>\r\n              These days you can usually find me playing Ultimate Frisbee or Basketball.\r\n              <br></br>\r\n              <br></br>\r\n              <img src={process.env.PUBLIC_URL + '/images/UltiChampions.jpg'} style={{width: 600}} alt='Team Photo' />\r\n            </div>\r\n\r\n\r\n            <div class =\"hobbie\">\r\n              <h3> Enjoying Nature </h3>\r\n              There's nothing more relaxing for me than heading down to the beach or going for a walk.\r\n              <br></br>\r\n              <br></br>\r\n              <img src={process.env.PUBLIC_URL + '/images/Beach.jpg'} width={600} height = {450} alt='Beach' />\r\n              \r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hobbies;\r\n","import React, { Component } from 'react';\nimport Sidebar from './components/Sidebar/sidebar';\nimport Home from './components/Home/home'\nimport Projects from './components/Projects/projects';\nimport Hobbies from './components/Hobbies/hobbies';\n\nclass App extends Component {\n  render() {\n    return (\n      <div id = \"App\">\n        <div id = \"sidebar\">\n          <Sidebar></Sidebar>\n        </div>\n\n        <div id = \"page-wrap\">\n          <div id = \"home\">\n            <Home></Home>\n          </div>\n\n          <div id = \"projects\">\n            <Projects></Projects>\n          </div>\n\n          <div id = \"hobbies\">\n            <Hobbies></Hobbies>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./App.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}